{"version":3,"sources":["components/results.tsx","components/question.tsx","components/exo.tsx","exos/pokemon.tsx","exos/fonciere.tsx","exos/exos.tsx","exos/metro.tsx","App.tsx","index.tsx"],"names":["ResultsTable","columns","values","Paper","elevation","sx","width","TableContainer","maxHeight","Table","size","stickyHeader","TableHead","TableRow","map","columnName","i","TableCell","align","fontWeight","fontSize","TableBody","row","hover","role","tabIndex","value","equal","require","name","db","question","answer","useState","request","setRequest","result","setResult","expected","setExpected","verdict","setVerdict","open","setOpen","handleClose","_","reason","action","Fragment","IconButton","color","onClick","Box","mb","Grid","spacing","container","alignItems","item","md","border","p","height","defaultLanguage","onChange","e","options","lineNumbers","minimap","enabled","Snackbar","autoHideDuration","onClose","message","Button","variant","exec","r","err","toString","direction","xs","Typography","exo","setDb","useEffect","a","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","db_url","then","res","text","Promise","all","SQL","buf","Database","description","borderLeft","borderColor","padding","diagram","frameBorder","src","questions","q","answers","exo_pokemon","exo_fonciere","href","exos","drawerWidth","App","props","window","React","mobileOpen","setMobileOpen","selectedExo","setSelectedExo","handleDrawerToggle","undefined","document","body","drawer","Toolbar","Divider","List","ListItem","disablePadding","ListItemButton","disableRipple","selected","ListItemText","primary","display","CssBaseline","AppBar","position","sm","ml","edge","mr","noWrap","component","flexShrink","Drawer","ModalProps","keepMounted","boxSizing","flexGrow","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8f0e63e3.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n */\nexport function ResultsTable({ columns, values }) {\n  return (\n    <Paper elevation={3} sx={{ width: \"100%\" }}>\n      <TableContainer sx={{ maxHeight: 250 }}>\n        <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((columnName, i) => (\n                <TableCell\n                  align=\"center\"\n                  sx={{ fontWeight: \"bold\", fontSize: 16 }}\n                  key={i}\n                >\n                  {columnName}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {values.map((row, i) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\n                  {row.map((value, i) => {\n                    return (\n                      <TableCell align=\"center\" key={i}>\n                        {value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { ResultsTable } from \"./results\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Editor from \"@monaco-editor/react\";\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nvar equal = require(\"fast-deep-equal/es6/react\");\n\nexport default ({ name, db, question, answer }) => {\n  const [request, setRequest] = useState(\"\");\n  const [result, setResult] = useState<null | any[]>(null);\n  const [expected, setExpected] = useState<null | any[]>(null);\n  const [verdict, setVerdict] = useState(<pre></pre>);\n  const [open, setOpen] = useState(false);\n\n  const handleClose = (_: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const action = (\n    <React.Fragment>\n      <IconButton\n        size=\"small\"\n        aria-label=\"close\"\n        color=\"inherit\"\n        onClick={handleClose}\n      >\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  );\n\n  return (\n    <Box mb={4}>\n      {question}\n      <Grid spacing={2} container alignItems=\"center\">\n        <Grid item mb={5} md={10}>\n          <Box sx={{ border: 1 }} p={0.5}>\n            <Editor\n              height=\"10vh\"\n              defaultLanguage=\"sql\"\n              onChange={(e) => setRequest(e)}\n              options={{\n                lineNumbers: \"off\",\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          </Box>\n        </Grid>\n        <Grid item md={2}>\n          <Snackbar\n            open={open}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            message={verdict}\n            action={action}\n          />\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"success\"\n            onClick={() => {\n              try {\n                let expected = db.exec(answer);\n                let r = db.exec(request);\n                setResult(r);\n                setExpected(expected);\n\n                setVerdict(\n                  equal(r[0].values, expected[0].values) ? (\n                    <Box>Correct !</Box>\n                  ) : (\n                    <Box>Votre requête ne renvoie pas le bon résultat.</Box>\n                  )\n                );\n                setOpen(true);\n              } catch (err) {\n                setVerdict(<pre>{(err || \"\").toString()}</pre>);\n              }\n            }}\n          >\n            Valider\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid container spacing={6} direction=\"row\">\n        {result && (\n          <Grid item md={5} xs={12}>\n            <Typography align=\"center\">\n              Résultat de votre requête <br></br>\n              {result.map(({ columns, values }) => (\n                <ResultsTable columns={columns} values={values} />\n              ))}\n            </Typography>\n          </Grid>\n        )}\n        {expected && (\n          <Grid item md={5} xs={12}>\n            <Typography align=\"center\">\n              Résultat attendu <br></br>\n              {expected.map(({ columns, values }) => (\n                <ResultsTable columns={columns} values={values} />\n              ))}\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Exo_interface } from \"../exos/exos\";\nimport Typography from \"@mui/material/Typography\";\nimport initSqlJs from \"sql.js\";\n// @ts-ignore\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\nimport Question from \"./question\";\nimport Box from \"@mui/material/Box\";\n\nexport default (exo: Exo_interface) => {\n  const [db, setDb] = useState<any>(null);\n  useEffect(() => {\n    (async () => {\n      const sqlPromise = initSqlJs({\n        locateFile: () => sqlWasm,\n      });\n      const dataPromise = fetch(exo.db_url).then((res) => res.text());\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      const db = new SQL.Database();\n      db.exec(buf);\n      setDb(db);\n    })();\n  }, []);\n\n  return (\n    <div>\n      {exo.description && (\n        <Box sx={{ borderLeft: 2.5, borderColor: \"gray\", padding: 2 }}>\n          {exo.description}\n        </Box>\n      )}\n      {exo.diagram && (\n        <Typography align=\"center\">\n          <iframe\n            frameBorder=\"0\"\n            width=\"100%\"\n            height=\"400\"\n            src={\"https://dbdiagram.io/embed/\" + exo.diagram}\n          >\n            {\" \"}\n          </iframe>\n        </Typography>\n      )}\n      <hr></hr>\n      <ol>\n        {exo.questions.map((q, i) => (\n          <li key={`${exo.name}_${i}`}>\n            <Question\n              db={db}\n              name={exo.name}\n              question={q}\n              answer={exo.answers[i]}\n            />\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Exo_interface } from \"./exos\";\n\nexport const exo_pokemon: Exo_interface = {\n  name: \"Pokémon\",\n  description: (\n    <div>Base de données contenant les pokémons de la 1ère génération.</div>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/mp2i-info/mp2i-info.github.io/main/files/A_sql/pokemon/pokemon.sql\",\n  diagram: \"62853fe17f945876b6459548\",\n  questions: [\n    \"Calculer le nombre de pokémons.\",\n    \"Afficher les pokémons détenus par Pierre.\",\n  ],\n  answers: [\n    \"SELECT count(*) FROM pokemons;\",\n    \"SELECT pokemons.nom FROM pokemons JOIN detient_pokemons ON pokemons.id = pokemon_id JOIN dresseurs ON dresseurs.id = dresseur_id\",\n  ],\n};\n","import React from \"react\";\nimport { Exo_interface } from \"./exos\";\n\nexport const exo_fonciere: Exo_interface = {\n  name: \"Valeur foncière\",\n  diagram: \"630bbf70f1a9b01b0ffa30be\",\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/notebooks/master/nb/db/fonciere/fonciere.sql\",\n  description: (\n    <div>\n      Informations sur une partie des ventes immobilières 2021 en France.{\" \"}\n      <br></br>\n      La <b>valeur foncière</b> est l'estimation de la valeur d'un terrain.{\" \"}\n      <br></br>\n      Les noms de voie et de commune sont en majuscules.\n      <br></br>\n      <a href=\"https://cadastre.data.gouv.fr/dvf\">Source : data.gouv</a>.\n    </div>\n  ),\n  questions: [\"Quel est le nombre moyen de m2 du bâti ?\"],\n  answers: [\n    \"select avg(surface_reelle_bati) as 'nombre moyen de m2 du bâti' from fonciere;\",\n  ],\n};\n","import { exo_pokemon } from \"./pokemon\";\nimport { exo_fonciere } from \"./fonciere\";\nimport { exo_metro } from \"./metro\";\n\nexport interface Exo_interface {\n  name: string;\n  diagram: string;\n  db_url: string;\n  description: JSX.Element;\n  questions: string[];\n  answers: string[];\n}\n\nexport const exos: Exo_interface[] = [exo_metro, exo_fonciere, exo_pokemon];\n","import { Exo_interface } from \"./exos\";\nimport Grid from \"@mui/material/Grid\";\n\nexport const exo_metro: Exo_interface = {\n  name: \"Métro parisien\",\n  description: (\n    <Grid>\n      Cette base de données contient une table <code>metro</code> contenant les\n      stations de métro et RER parisiennes. Attributs de la table :\n      <ul>\n        <li>\n          <code>station</code> : nom de la station\n        </li>\n        <li>\n          <code>reseau</code> : <code>'Métro'</code> ou <code>'Rer'</code>\n        </li>\n        <li>\n          <code>trafic</code> : nombre de passagers en 2021\n        </li>\n        <li>\n          <code>ville</code> : ville de la station (exemples :{\" \"}\n          <code>'Paris'</code>, <code>'Saint-Denis'</code>)\n        </li>\n        <li>\n          <code>arrondissement</code> : arrondissement de la station (uniquement\n          pour Paris)\n        </li>\n        <li>\n          <code>correspondance_1</code> à <code>correspondance_5</code> : lignes\n          de métro/RER passant par la station\n        </li>\n      </ul>\n    </Grid>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/notebooks/master/nb/db/metro/metro.sql\",\n  diagram: \"630e18a30911f91ba5f92ffa\",\n  questions: [\n    \"Afficher toutes les stations de métro.\",\n    \"Afficher la (ou les) station(s) de Massy.\",\n    \"Afficher la station et le trafic de la station la plus fréquentée.\",\n    \"Afficher chaque arrondissement avec son nombre de stations de métro.\",\n  ],\n  answers: [\n    \"SELECT DISTINCT station FROM metro;\",\n    \"SELECT station FROM metro WHERE ville = 'Massy'\",\n    \"SELECT station, trafic FROM metro ORDER BY trafic DESC LIMIT 1\",\n    \"SELECT arrondissement, COUNT(*) FROM metro GROUP BY arrondissement\",\n  ],\n};\n","// https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres/\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport Exo from \"./components/exo\";\nimport { exos } from \"./exos/exos\";\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Divider from \"@mui/material/Divider\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport GithubCorner from \"react-github-corner\";\n\nconst drawerWidth = 240;\n\nexport default function App(props) {\n  const { window } = props;\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [selectedExo, setSelectedExo] = React.useState(0);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined;\n\n  const drawer = (\n    <div>\n      <Toolbar />\n      <Divider />\n      <List>\n        {exos.map(({ name }, i) => (\n          <ListItem key={name} disablePadding>\n            <ListItemButton\n              disableRipple\n              selected={selectedExo === i}\n              onClick={(_) => setSelectedExo(i)}\n            >\n              <ListItemText primary={name} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  let exos_components = exos.map((e) => <Exo {...e} />);\n\n  return (\n    <div>\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          sx={{\n            width: { sm: `calc(100% - ${drawerWidth}px)` },\n            ml: { sm: `${drawerWidth}px` },\n            height: 60,\n          }}\n        >\n          <Toolbar>\n            <GithubCorner\n              href=\"https://github.com/cpge-exercices/sql\"\n              direction=\"right\"\n              size=\"60\"\n            />\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              sx={{ mr: 2, display: { sm: \"none\" } }}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap component=\"div\">\n              Exercices SQL : {exos[selectedExo].name}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Box\n          component=\"nav\"\n          sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n        >\n          {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n            sx={{\n              display: { xs: \"block\", sm: \"none\" },\n              \"& .MuiDrawer-paper\": {\n                boxSizing: \"border-box\",\n                width: drawerWidth,\n              },\n            }}\n          >\n            {drawer}\n          </Drawer>\n          <Drawer\n            variant=\"permanent\"\n            sx={{\n              display: { xs: \"none\", sm: \"block\" },\n              \"& .MuiDrawer-paper\": {\n                boxSizing: \"border-box\",\n                width: drawerWidth,\n              },\n            }}\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Box>\n        <Box\n          component=\"main\"\n          sx={{\n            flexGrow: 1,\n            p: 3,\n            width: { sm: `calc(100% - ${drawerWidth}px)` },\n          }}\n        >\n          <Toolbar />\n          {<Exo key={selectedExo} {...exos[selectedExo]} />}\n        </Box>\n      </Box>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}