{"version":3,"sources":["components/results.tsx","components/question.tsx","components/exo.tsx","exos/pokemon.tsx","exos/concours.tsx","exos/pays.tsx","exos/exos.tsx","exos/metro.tsx","App.tsx","index.tsx"],"names":["columns","values","Paper","elevation","sx","width","TableContainer","maxHeight","Table","size","stickyHeader","TableHead","TableRow","map","columnName","i","TableCell","align","fontWeight","fontSize","TableBody","row","hover","role","tabIndex","value","equal","require","name","db","question","answer","useState","request","setRequest","result","setResult","expected","setExpected","verdict","setVerdict","error","setError","open","setOpen","handleClose","_","reason","action","Fragment","IconButton","color","onClick","severity","message","Box","mb","Snackbar","autoHideDuration","Alert","onClose","Grid","container","justifyContent","alignItems","m","spacing","item","md","sm","xs","border","p","height","defaultLanguage","onChange","e","options","lineNumbers","minimap","enabled","Button","variant","exec","r","length","err","console","log","direction","Typography","exo","page","setPage","setDb","useEffect","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","db_url","then","res","text","Promise","all","SQL","buf","Database","description","borderLeft","borderColor","padding","diagram","src","Divider","Pagination","siblingCount","questions","count","v","style","display","answers","exo_pokemon","exo_pokemon_group","exo_concours","href","exo_concours_group","exo_concours_nested","exo_pays","cours","url","exos","HomeIcon","props","SvgIcon","d","drawerWidth","App","window","React","mobileOpen","setMobileOpen","selectedExo","setSelectedExo","handleDrawerToggle","undefined","document","body","exercise","ListItem","disablePadding","ListItemButton","disableRipple","selected","drawer","List","c","ListItemText","primary","main","CssBaseline","AppBar","position","ml","Toolbar","edge","mr","noWrap","component","flexShrink","Drawer","ModalProps","keepMounted","boxSizing","flexGrow","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.0a444b60.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n */\nexport default ({ columns, values }): JSX.Element => {\n    return (\n        <Paper elevation={3} sx={{ width: \"100%\" }}>\n            <TableContainer sx={{ maxHeight: 250 }}>\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((columnName, i) => (\n                                <TableCell\n                                    align=\"center\"\n                                    sx={{ fontWeight: \"bold\", fontSize: 16 }}\n                                    key={i}\n                                >\n                                    {columnName}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {values.map((row, i) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\n                                    {row.map((value, i) => {\n                                        return (\n                                            <TableCell align=\"center\" key={i}>\n                                                {value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ResultsTable from \"./results\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Editor from \"@monaco-editor/react\";\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Alert, AlertColor } from \"@mui/material\";\n\nvar equal = require(\"fast-deep-equal/es6/react\");\n\nexport default ({ name, db, question, answer }): JSX.Element => {\n    const [request, setRequest] = useState(\"\");\n    const [result, setResult] = useState<null | any[]>(null);\n    const [expected, setExpected] = useState<null | any[]>(null);\n    const [verdict, setVerdict] = useState(0);\n    const [error, setError] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const handleClose = (_: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setOpen(false);\n    };\n\n    const action = (\n        <React.Fragment>\n            <IconButton\n                size=\"small\"\n                aria-label=\"close\"\n                color=\"inherit\"\n                onClick={handleClose}\n            >\n                <CloseIcon fontSize=\"small\" />\n            </IconButton>\n        </React.Fragment>\n    );\n    let severity: AlertColor = \"success\";\n    let message = \"Correct !\";\n    if (error) {\n        severity = \"error\";\n        message = \"Erreur : \" + error;\n    }\n    else if (verdict === 0) {\n        severity = \"warning\";\n        message = \"Mauvais résultat.\";\n    }\n    return (\n        <Box mb={4} key={name}>\n            <Snackbar open={open} autoHideDuration={6000} action={action}>\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                    {message}\n                </Alert>\n            </Snackbar>\n            <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ m: 2, fontWeight: 'bold' }}>\n                {question}\n            <Grid\n                spacing={2}\n                mb={5}\n                container\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item md={10} sm={10} xs={12}>\n                    <Box sx={{ border: 1, width: \"100%\" }} p={0.5}>\n                        <Editor\n                            height=\"13vh\"\n                            defaultLanguage=\"sql\"\n                            onChange={(e) => setRequest(e)}\n                            options={{\n                                lineNumbers: \"off\",\n                                minimap: {\n                                    enabled: false,\n                                },\n                            }}\n                        />\n                    </Box>\n                </Grid>\n                <Grid item>\n                    <Button\n                        size=\"large\"\n                        variant=\"contained\"\n                        color=\"success\"\n                        onClick={() => {\n                            setOpen(false);\n                            try {\n                                let expected = db.exec(answer);\n                                let r = db.exec(request);\n                                setResult(r);\n                                setExpected(expected);\n                                if (r.length === 0)\n                                    setVerdict(0);\n                                else\n                                    setVerdict(equal(r[0].values, expected[0].values) ? 1 : 0);\n                            } catch (err) {\n                                console.log(err);\n                                setError(err.message);\n                            }\n                            setOpen(true);\n                        }}\n                    >\n                        Valider\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2} direction=\"row\">\n                {result && (\n                    <Grid item md={5.5} xs={12}>\n                        <Typography align=\"center\">\n                            {result.map(({ columns, values }) => (\n                                <ResultsTable columns={columns} values={values} />\n                                ))}<br />\n                            Résultat de votre requête\n                        </Typography>\n                    </Grid>\n                )}\n                {expected && (\n                    <Grid item md={5.5} xs={12}>\n                        <Typography align=\"center\">\n                            {expected.map(({ columns, values }) => (\n                                <ResultsTable columns={columns} values={values} />\n                            ))}<br />\n                            Résultat attendu\n                        </Typography>\n                    </Grid>\n                )}\n            </Grid>\n            </Grid>\n        </Box>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Exo_interface } from \"../exos/exos\";\nimport Typography from \"@mui/material/Typography\";\nimport initSqlJs from \"sql.js\";\n// @ts-ignore\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\nimport Question from \"./question\";\nimport Box from \"@mui/material/Box\";\nimport Pagination from '@mui/material/Pagination';\nimport { Grid } from \"@mui/material\";\nimport Divider from '@mui/material/Divider';\n\nexport default (exo: Exo_interface): JSX.Element => {\n    const [page, setPage] = useState(1);\n    const [db, setDb] = useState<any>(null);\n    useEffect(() => {\n        (async () => {\n            const sqlPromise = initSqlJs({\n                locateFile: () => sqlWasm,\n            });\n            const dataPromise = fetch(exo.db_url).then((res) => res.text());\n            const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n            const db = new SQL.Database();\n            db.exec(buf);\n            setDb(db);\n        })();\n    }, []);\n    \n    return (\n        <div key={exo.name}>\n            <Grid container justifyContent=\"center\" alignItems=\"center\">\n                {exo.description && <Grid item sm={4} xs={12}>\n                    <Box sx={{ borderLeft: 2.5, borderColor: \"gray\", padding: 2 }}>\n                        {exo.description}\n                    </Box>\n                </Grid>\n                }\n                <Grid item sm={8} xs={12}>\n                    {exo.diagram && <iframe width=\"100%\" height=\"450\" src={\"https://dbdiagram.io/embed/\" + exo.diagram} />}\n                </Grid>\n            </Grid>\n            <Divider sx={{ m: 2 }} />\n            <Grid container justifyContent=\"center\" alignItems=\"center\">\n                <Pagination siblingCount={exo.questions.length} count={exo.questions.length} page={page} onChange={(_, v) => { setPage(v) }} />\n            </Grid>\n            {exo.questions.map((_, i) =>\n                <div style={{ display: i + 1 === page ? \"block\" : \"none\" }}>\n                    <Question\n                        name={exo.name}\n                        db={db}\n                        question={exo.questions[i]}\n                        answer={exo.answers[i]}\n                    />\n                </div>\n            )}\n\n        </div>\n    );\n};\n","import { Exo_interface } from \"./exos\";\n\nexport const exo_pokemon: Exo_interface = {\n  name: \"Pokémon\",\n  description: (\n    <div>Base de données contenant les pokémons de la 1ère génération.</div>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/datasets/main/pokemon/pokemon.sql\",\n  diagram: \"62853fe17f945876b6459548\",\n  questions: [\n    \"Calculer le nombre de pokémons.\",\n    \"Afficher le nom de chaque pokémon avec son niveau d'évolution.\",\n    \"Afficher les pokémons détenus par Pierre.\",\n    \"Afficher le nom de chaque attaque avec son type.\",\n    \"Afficher chaque dresseur avec chacun de ses pokémons.\",\n    \"Afficher chaque pokémon avec son évolution et son niveau d'évolution.\",\n  ],\n  answers: [\n    \"SELECT count(*) FROM pokemons;\",\n    \"select nom, niveau from evolue_en join pokemons on id = pokemon_base_id\",\n    \"SELECT pokemons.nom FROM pokemons JOIN detient_pokemons ON pokemons.id = pokemon_id JOIN dresseurs ON dresseurs.id = dresseur_id WHERE dresseurs.nom = 'Pierre'\",\n    \"select types.libelle, attaques.libelle from types join attaques on types.id = type_id\",\n    \"select dresseurs.nom, pokemons.nom from pokemons join detient_pokemons on pokemons.id = pokemon_id join dresseurs on dresseurs.id = dresseur_id\",\n    \"select pokemons.nom, pokemons_evol.nom, niveau from evolue_en join pokemons on pokemon_base_id = pokemons.id join pokemons as pokemons_evol on pokemon_evol_id = pokemons_evol.id\",\n  ],\n};\n\nexport const exo_pokemon_group = {\n    ...exo_pokemon, \n    questions: [\n        \"Afficher chaque dresseur avec son nombre de pokémons et leur niveau moyen.\",\n        \"Afficher les dresseurs qui possèdent au moins 4 pokémons de niveau au moins 30.\"\n    ],\n    answers: [\n        \"select nom, count(*) as nombre_pokemons, avg(niveau) as niveau_moyen from dresseurs join detient_pokemons on id = dresseur_id group by nom\",\n        \"select nom, count(*) from dresseurs join detient_pokemons on id = dresseur_id where niveau >= 50 group by nom having count(*) > 3\"\n    ],\n}","import { Exo_interface } from \"./exos\";\n\nexport const exo_concours: Exo_interface = {\n  name: \"Concours\",\n  description: (\n    <div>Statistiques partielles sur les concours des écoles d'ingénieurs en 2022. <br /> <a href=\"https://www.scei-concours.fr/statistiques.php\">Source : SCEI</a>. </div>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/datasets/main/concours/concours.sql\",\n  diagram: \"642ec2708615191cfa8bf1a2\",\n  questions: [\n    \"Afficher les noms des concours dans la base de données.\",\n    \"Afficher les épreuves à l'écrit de cmp (Concours Mines-Ponts) : filière, matière, durée et coefficient.\",\n    \"Donner le coefficient total des mathématiques au concours ccinp.\", \n  ],\n  answers: [\n    \"select distinct nom from concours;\",\n    \"SELECT filiere, matiere, duree, coefficient FROM epreuve JOIN concours ON concours_id=concours.id JOIN epreuve_matiere ON epreuve_id=epreuve.id WHERE NOT oral\",\n    \"SELECT SUM(coefficient) as 'coefficient des mathématiques' FROM epreuve JOIN concours ON concours_id=concours.id JOIN epreuve_matiere ON epreuve_id=epreuve.id WHERE concours.nom='ccinp' AND matiere='mathématiques';\",\n  ],\n};\n\nexport const exo_concours_group = {\n    ...exo_concours, \n    questions: [\n        \"Afficher le coefficient total de chaque matière pour la filière mpi du concours ccinp.\",\n        \"Pour chaque concours, afficher le nom, la filière, le nombre d'épreuves écrites et leur durée totale.\",\n    ],\n    answers: [\n        \"SELECT matiere, SUM(coefficient) as 'coefficient total' FROM epreuve JOIN concours ON concours_id=concours.id JOIN epreuve_matiere ON epreuve_id=epreuve.id WHERE concours.nom='ccinp' AND filiere = 'mpi' GROUP BY matiere;\",\n        \"SELECT concours.nom, filiere, COUNT(*) as 'nombre d'épreuves', SUM(duree) as 'durée totale' FROM epreuve JOIN concours ON concours_id=concours.id WHERE NOT oral GROUP BY concours_id;\",\n    ],\n}\n\nexport const exo_concours_nested = {\n    ...exo_concours, \n    questions: [\n        \"Donner le coefficient des mathématiques au concours ccinp, en pourcentage.\", \n    ],\n    answers: [\n        \"SELECT(SELECT SUM(coefficient) FROM epreuve JOIN concours ON concours_id=concours.id JOIN epreuve_matiere ON epreuve_id=epreuve.id WHERE concours.nom='ccinp' AND matiere='mathématiques')/(SELECT SUM(coefficient) FROM epreuve JOIN concours ON concours_id=concours.id JOIN epreuve_matiere ON epreuve_id=epreuve.id) as 'pourcentage mathématiques';\"\n    ],\n}","import { Exo_interface } from \"./exos\";\n\nexport const exo_pays: Exo_interface = {\n  name: \"Pays\",\n  description: (\n    <div>Base de données contenant les pays du monde et leurs populations en 2015.<br /><br />\n    <code>croissance_population</code>, <code>taux_naissance</code>, <code>taux_deces</code> et <code>taux_migration</code> sont en pourcentage (si <code>croissance_population</code> vaut 2% alors la population a augmenté de 2% durant l'année).<br /><br />\n    <a href=\"https://www.cia.gov/the-world-factbook\">Source : CIA</a>.</div>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/datasets/main/pays/pays.sql\",\n  diagram: \"642c778b5758ac5f1726bc6c\",\n  questions: [\n    \"Afficher le nom, la population et la surface de chaque pays.\",\n    \"Afficher le nom et la population des pays ayant moins de 2000 d'habitants.\",\n    \"Afficher les pays dont le taux de naissance est inférieur au taux de décès.\",\n    \"Afficher la population totale sur Terre, en milliards. On pourra diviser par 1e9.\",\n    \"Afficher le nombre total de naissances sur Terre.\",\n    \"Afficher les 10 pays de plus de 5 millions d'habitants ayant le plus fort taux de migration. On affichera aussi le taux de migration.\",\n    \"Afficher les 10 pays ayant la plus forte densité de population. On affichera aussi la densité.\",\n  ],\n  answers: [\n    \"SELECT nom, population, surface FROM pays\",\n    \"SELECT nom, population FROM pays WHERE population <= 2000\",\n    \"select nom from pays where taux_naissance < taux_deces\",\n    \"select sum(population)/1e9 as 'population totale' from pays\",\n    \"select sum(population*taux_naissance/100.)/1000000000. as 'nombre de naissances' from pays\",\n    \"select nom, taux_migration from pays where population > 5000000 order by taux_migration desc limit 10\",\n    \"select nom, population/surface as densité from pays where population > 5000000 order by densité desc limit 10\",\n  ],\n};\n","import { exo_pokemon, exo_pokemon_group } from \"./pokemon\";\nimport { exo_concours, exo_concours_group, exo_concours_nested } from \"./concours\";\nimport { exo_fonciere } from \"./fonciere\";\nimport { exo_pays } from \"./pays\"\nimport { exo_metro } from \"./metro\";\n\nexport interface Exo_interface {\n  name: string;\n  diagram: string;\n  db_url: string;\n  description: JSX.Element;\n  questions: string[];\n  answers: string[];\n}\n\nexport const cours = [\n    { name: \"Requêtes sur une table\", url: \"1_select/select.pdf\", exos: [exo_metro, exo_pays] },\n    { name: \"Plusieurs tables\", url: \"2_join/join.pdf\", exos: [exo_concours, exo_pokemon] },\n    { name: \"Fonctions d'agrégation\", url: \"3_groupby/groupby.pdf\", exos: [exo_concours_group, exo_pokemon_group] },\n    { name: \"Requêtes imbriquées\", url: \"4_imbrique/imbrique.pdf\", exos: [exo_concours_nested] },\n];\n\nexport const exercices_other = [exo_fonciere];\n","import { Exo_interface } from \"./exos\";\nimport Grid from \"@mui/material/Grid\";\n\nexport const exo_metro: Exo_interface = {\n  name: \"Métro parisien\",\n  description: (\n    <Grid>\n      Cette base de données contient une table <code>metro</code> contenant les\n      stations de métro et RER parisiennes. Attributs de la table :\n      <ul>\n        <li>\n          <code>station</code> : nom de la station\n        </li>\n        <li>\n          <code>reseau</code> : <code>'Métro'</code> ou <code>'Rer'</code>\n        </li>\n        <li>\n          <code>trafic</code> : nombre de passagers en 2021\n        </li>\n        <li>\n          <code>ville</code> : ville de la station (exemples :{\" \"}\n          <code>'Paris'</code>)\n        </li>\n        <li>\n          <code>arrondissement</code> : arrondissement de la station (uniquement\n          pour Paris)\n        </li>\n        {/* <li>\n          <code>correspondance_1</code> à <code>correspondance_5</code> : lignes\n          de métro/RER passant par la station\n        </li> */}\n      </ul>\n      <a href=\"https://www.data.gouv.fr/fr/datasets/stations-de-metro\">Source : data.gouv</a>.\n    </Grid>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/datasets/main/metro_paris/metro_paris.sql\",\n  diagram: \"630e18a30911f91ba5f92ffa\",\n  questions: [\n    \"Afficher toutes les stations.\",\n    \"Afficher les stations de la ville de Massy.\",\n    \"Afficher les stations de RER du 5ème arrondissement de Paris.\",\n    \"Combien y a-t-il eu de passagers dans la ville de Saint Denis ?\",\n    \"Afficher le nom et la ville de toutes les stations en dehors de Paris avec un trafic supérieur à 10 millions\",\n    \"Afficher la station et le trafic de la station la plus fréquentée.\",\n    \n    // \"Afficher chaque arrondissement avec son nombre de stations de métro.\",\n  ],\n  answers: [\n    \"SELECT DISTINCT station FROM metro\",\n    \"SELECT station FROM metro WHERE ville = 'Massy'\",\n    \"SELECT station FROM metro WHERE arrondissement = 5 AND reseau = 'Rer'\",\n    \"SELECT SUM(trafic) as 'Nombre de passagers' FROM metro WHERE ville = 'Saint Denis'\",\n    \"SELECT station, ville FROM metro WHERE ville != 'Paris' AND trafic > 10000000\",\n    \"SELECT station, trafic FROM metro ORDER BY trafic DESC LIMIT 1\",\n    // \"SELECT arrondissement, COUNT(*) FROM metro GROUP BY arrondissement\",\n  ],\n};\n","import React from \"react\";\nimport \"./styles.css\";\nimport Exo from \"./components/exo\";\nimport { cours } from \"./exos/exos\";\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Divider from \"@mui/material/Divider\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport GithubCorner from \"react-github-corner\";\nimport { Grid } from \"@mui/material\";\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nfunction HomeIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n        </SvgIcon>\n    );\n}\n\nconst drawerWidth = 240;\n\nexport default function App(props) {\n    const { window } = props;\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n    const [selectedExo, setSelectedExo] = React.useState(null);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const container =\n        window !== undefined ? () => window().document.body : undefined;\n\n    const exercise = (e: any) => {\n        return <ListItem key={e.questions[0]} disablePadding>\n            <ListItemButton disableRipple selected={selectedExo === e} onClick={(_) => { setSelectedExo(e); setMobileOpen(false) }}>\n                Exercice : {e.name}\n            </ListItemButton>\n        </ListItem>\n    }\n\n    const drawer = (\n        <div>\n            <List>\n                {cours.map((c) => (\n                    <div>\n                        <ListItem key={c.name} disablePadding>\n                            <ListItemText primary={\n                                <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ fontWeight: 'bold' }}>\n                                    <Typography style={{ fontWeight: \"bold\" }}>{c.name}</Typography>\n                                </Grid>\n                            } />\n                        </ListItem>\n                        <ListItem key={c.name + '2'} disablePadding>\n                            <ListItemButton disableRipple selected={selectedExo === c} onClick={(_) => { setSelectedExo(c); setMobileOpen(false) }}>\n                                Cours\n                            </ListItemButton>\n                        </ListItem>\n                        {c.exos.map(exercise)}\n                        <Divider sx={{ border: 1 }} />\n                    </div>\n                ))}\n            </List>\n        </div>\n    );\n\n    let main = (<div>\n        Ce site propose des cours et exercices interactifs pour apprendre SQL et comprendre le fonctionnement des bases de données.\n        <br />\n        Il est conforme au programme de CPGE (filières MP2I, MP, PC, PSI, PT, BCPST).\n        <br />\n        <b>Attention : dans vos réponses, les colonnes doivent apparaître dans le même ordre que dans la question.</b><br />\n        <a href=\"https://github.com/sql-exercices/sql-exercices.github.io/issues\">Signaler un problème</a><br />\n        <a href=\"https://github.com/fortierq/datasets\">Bases de données utilisées</a><br />\n        <a href=\"https://fortierq.github.io/teaching\">Mes autres cours</a><br /><br />\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <img src=\"https://raw.githubusercontent.com/sql-exercices/sql-exercices.github.io/main/src/xkcd.png\" width=\"600\" />\n        </Grid>\n    </div>)\n    if (selectedExo) {\n        if ('url' in selectedExo)\n            main = (<iframe src={`https://mozilla.github.io/pdf.js/web/viewer.html?file=https://raw.githubusercontent.com/fortierq/cours/main/sql/cours/${selectedExo.url}#zoom=page-fit&pagemode=none`} width=\"100%\" height=\"700\" />)\n        else\n            main = (<Exo key={selectedExo.questions[0]} {...selectedExo} />)\n    }\n    return (\n        <div>\n            <Box sx={{ display: \"flex\" }}>\n                <CssBaseline />\n                <AppBar\n                    position=\"fixed\"\n                    sx={{\n                        width: { sm: `calc(100% - ${drawerWidth}px)` },\n                        ml: { sm: `${drawerWidth}px` },\n                        height: 60,\n                    }}\n                >\n                    <Toolbar>\n                        <GithubCorner\n                            href=\"https://github.com/sql-exercices/sql-exercices.github.io\"\n                            direction=\"right\"\n                            size=\"60\"\n                        />\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={handleDrawerToggle}\n                            sx={{ mr: 2, display: { sm: \"none\" } }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <IconButton\n                            disableRipple\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={(_) => { setSelectedExo(null) }}\n                            sx={{ mr: 1 }}\n                        >\n                            <HomeIcon fontSize=\"large\" />\n                        </IconButton>\n                        <Typography variant=\"h6\" noWrap component=\"div\">\n                            {/* {selectedExo ? selectedExo : \"Cours de bases de données et exercices SQL\"} */}\n                            Cours et exercices SQL\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <Box\n                    component=\"nav\"\n                    sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n                >\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                        sx={{\n                            display: { xs: \"block\", sm: \"none\" },\n                            \"& .MuiDrawer-paper\": {\n                                boxSizing: \"border-box\",\n                                width: drawerWidth,\n                            },\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                    <Drawer\n                        variant=\"permanent\"\n                        sx={{\n                            display: { xs: \"none\", sm: \"block\" },\n                            \"& .MuiDrawer-paper\": {\n                                boxSizing: \"border-box\",\n                                width: drawerWidth,\n                                border: 1.5,\n                            },\n                        }}\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Box>\n                <Box\n                    component=\"main\"\n                    sx={{\n                        flexGrow: 1,\n                        p: 3,\n                        width: { sm: `calc(100% - ${drawerWidth}px)` },\n                    }}\n                >\n                    <Toolbar />\n                    {main}\n                </Box>\n            </Box>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}