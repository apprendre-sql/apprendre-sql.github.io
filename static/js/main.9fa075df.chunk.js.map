{"version":3,"sources":["components/results.tsx","components/question.tsx","components/exo.tsx","exos/pokemon.tsx","exos/fonciere.tsx","exos/pays.tsx","exos/metro.tsx","exos/exos.tsx","App.tsx","index.tsx"],"names":["columns","values","Paper","elevation","sx","width","TableContainer","maxHeight","Table","size","stickyHeader","TableHead","TableRow","map","columnName","i","TableCell","align","fontWeight","fontSize","TableBody","row","hover","role","tabIndex","value","equal","require","name","db","question","answer","useState","request","setRequest","result","setResult","expected","setExpected","verdict","setVerdict","error","open","setOpen","handleClose","_","reason","action","Fragment","IconButton","color","onClick","sev","message","Box","mb","Grid","container","justifyContent","alignItems","m","Snackbar","autoHideDuration","Alert","onClose","severity","spacing","item","md","sm","xs","border","p","height","defaultLanguage","onChange","e","options","lineNumbers","minimap","enabled","Button","variant","exec","r","err","console","log","direction","Typography","exo","page","setPage","setDb","useEffect","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","db_url","then","res","text","Promise","all","SQL","buf","Database","description","borderLeft","borderColor","padding","diagram","src","Divider","Pagination","count","questions","length","v","q","style","display","answers","exo_pokemon","exo_fonciere","href","exo_pays","exo_metro","exos","forEach","drawerWidth","cours","url","exercices_other","App","props","window","React","mobileOpen","setMobileOpen","selectedExo","setSelectedExo","handleDrawerToggle","undefined","document","body","title","t","ListItem","ListItemText","primary","exercise","disablePadding","ListItemButton","disableRipple","selected","drawer","List","Object","entries","exercises","CssBaseline","AppBar","position","ml","Toolbar","edge","mr","noWrap","component","flexShrink","Drawer","ModalProps","keepMounted","boxSizing","flexGrow","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.9fa075df.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n */\nexport default ({ columns, values }): JSX.Element => {\n    return (\n        <Paper elevation={3} sx={{ width: \"100%\" }}>\n            <TableContainer sx={{ maxHeight: 250 }}>\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((columnName, i) => (\n                                <TableCell\n                                    align=\"center\"\n                                    sx={{ fontWeight: \"bold\", fontSize: 16 }}\n                                    key={i}\n                                >\n                                    {columnName}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {values.map((row, i) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\n                                    {row.map((value, i) => {\n                                        return (\n                                            <TableCell align=\"center\" key={i}>\n                                                {value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ResultsTable from \"./results\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Editor from \"@monaco-editor/react\";\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Alert, AlertColor } from \"@mui/material\";\n\nvar equal = require(\"fast-deep-equal/es6/react\");\n\nexport default ({ name, db, question, answer }): JSX.Element => {\n    const [request, setRequest] = useState(\"\");\n    const [result, setResult] = useState<null | any[]>(null);\n    const [expected, setExpected] = useState<null | any[]>(null);\n    const [verdict, setVerdict] = useState(0);\n    const [error, setError] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const handleClose = (_: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setOpen(false);\n    };\n\n    const action = (\n        <React.Fragment>\n            <IconButton\n                size=\"small\"\n                aria-label=\"close\"\n                color=\"inherit\"\n                onClick={handleClose}\n            >\n                <CloseIcon fontSize=\"small\" />\n            </IconButton>\n        </React.Fragment>\n    );\n    let sev: AlertColor = \"success\";\n    let message = \"Correct !\";\n    if (error) {\n        sev = \"error\";\n        message = \"Erreur : \" + error;\n    }\n    else if (verdict === 0) {\n        sev = \"error\";\n        message = \"Incorrect !\";\n    }\n    return (\n        <Box mb={4} key={name}>\n            <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ m: 2, fontWeight: 'bold' }}>\n                {question}\n            </Grid>\n            <Snackbar open={open} autoHideDuration={6000} action={action}>\n                <Alert onClose={handleClose} severity={sev} sx={{ width: '100%' }}>\n                    {message}\n                </Alert>\n            </Snackbar>\n            <Grid\n                spacing={2}\n                mb={5}\n                container\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item md={10} sm={10} xs={12}>\n                    <Box sx={{ border: 1, width: \"100%\" }} p={0.5}>\n                        <Editor\n                            height=\"13vh\"\n                            defaultLanguage=\"sql\"\n                            onChange={(e) => setRequest(e)}\n                            options={{\n                                lineNumbers: \"off\",\n                                minimap: {\n                                    enabled: false,\n                                },\n                            }}\n                        />\n                    </Box>\n                </Grid>\n                <Grid item>\n                    <Button\n                        size=\"large\"\n                        variant=\"contained\"\n                        color=\"success\"\n                        onClick={() => {\n                            try {\n                                let expected = db.exec(answer);\n                                let r = db.exec(request);\n                                setResult(r);\n                                setExpected(expected);\n                                setVerdict(equal(r[0].values, expected[0].values) ? 1 : 0);\n                            } catch (err) {\n                                console.log(err);\n                                // setError(err);\n                            }\n                            setOpen(true);\n                        }}\n                    >\n                        Valider\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} direction=\"row\">\n                {result && (\n                    <Grid item md={5} xs={12}>\n                        <Typography align=\"center\">\n                            Résultat de votre requête <br></br>\n                            {result.map(({ columns, values }) => (\n                                <ResultsTable columns={columns} values={values} />\n                            ))}\n                        </Typography>\n                    </Grid>\n                )}\n                {expected && (\n                    <Grid item md={5} xs={12}>\n                        <Typography align=\"center\">\n                            Résultat attendu <br></br>\n                            {expected.map(({ columns, values }) => (\n                                <ResultsTable columns={columns} values={values} />\n                            ))}\n                        </Typography>\n                    </Grid>\n                )}\n            </Grid>\n        </Box>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Exo_interface } from \"../exos/exos\";\nimport Typography from \"@mui/material/Typography\";\nimport initSqlJs from \"sql.js\";\n// @ts-ignore\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\nimport Question from \"./question\";\nimport Box from \"@mui/material/Box\";\nimport Pagination from '@mui/material/Pagination';\nimport { Grid } from \"@mui/material\";\nimport Divider from '@mui/material/Divider';\n\nexport default (exo: Exo_interface): JSX.Element => {\n    const [page, setPage] = useState(1);\n    const [db, setDb] = useState<any>(null);\n    useEffect(() => {\n        (async () => {\n            const sqlPromise = initSqlJs({\n                locateFile: () => sqlWasm,\n            });\n            const dataPromise = fetch(exo.db_url).then((res) => res.text());\n            const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n            const db = new SQL.Database();\n            db.exec(buf);\n            setDb(db);\n        })();\n    }, []);\n    return (\n        <div key={exo.name}>\n            <Grid container justifyContent=\"center\" alignItems=\"center\">\n                {exo.description && <Grid item sm={4} xs={12}>\n                    <Box sx={{ borderLeft: 2.5, borderColor: \"gray\", padding: 2 }}>\n                        {exo.description}\n                    </Box>\n                </Grid>\n                }\n                <Grid item sm={8} xs={12}>\n                    {exo.diagram && <iframe width=\"100%\" height=\"450\" src={\"https://dbdiagram.io/embed/\" + exo.diagram} />}\n                </Grid>\n            </Grid>\n            <Divider sx={{ m: 3 }} />\n            <Grid container justifyContent=\"center\" alignItems=\"center\">\n                <Pagination count={exo.questions.length} page={page} onChange={(_, v) => { setPage(v) }} />\n            </Grid>\n            {exo.questions.map((q, i) =>\n                <div style={{ display: i + 1 === page ? \"block\" : \"none\" }}>\n                    <Question\n                        name={exo.name}\n                        db={db}\n                        question={exo.questions[i]}\n                        answer={exo.answers[i]}\n                    />\n                </div>\n            )}\n\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Exo_interface } from \"./exos\";\n\nexport const exo_pokemon: Exo_interface = {\n  name: \"Pokémon\",\n  description: (\n    <div>Base de données contenant les pokémons de la 1ère génération.</div>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/mp2i-info/mp2i-info.github.io/main/files/A_sql/pokemon/pokemon.sql\",\n  diagram: \"62853fe17f945876b6459548\",\n  questions: [\n    \"Calculer le nombre de pokémons.\",\n    \"Afficher le nom de chaque pokémon avec son niveau d'évolution.\",\n    \"Afficher les pokémons détenus par Pierre.\",\n    \"Afficher le nom de chaque attaque avec son type.\",\n    \"Afficher chaque dresseur avec chacun de ses pokémons.\",\n    \"Afficher chaque pokémon avec son évolution et son niveau d'évolution.\",\n    \"Afficher chaque dresseur avec son nombre de pokémons et leur niveau moyen\",\n    \"Afficher les dresseurs qui possèdent au moins 4 pokémons de niveau au moins 30\"\n  ],\n  answers: [\n    \"SELECT count(*) FROM pokemons;\",\n    \"select nom, niveau from evolue_en join pokemons on id = pokemon_base_id\",\n    \"SELECT pokemons.nom FROM pokemons JOIN detient_pokemons ON pokemons.id = pokemon_id JOIN dresseurs ON dresseurs.id = dresseur_id WHERE dresseurs.nom = 'Pierre'\",\n    \"select types.libelle, attaques.libelle from types join attaques on types.id = type_id\",\n    \"select dresseurs.nom, pokemons.nom from pokemons join detient_pokemons on pokemons.id = pokemon_id join dresseurs on dresseurs.id = dresseur_id\",\n    \"select pokemons.nom, pokemons_evol.nom, niveau from evolue_en join pokemons on pokemon_base_id = pokemons.id join pokemons as pokemons_evol on pokemon_evol_id = pokemons_evol.id\",\n    \"select nom, count(*) as nombre_pokemons, avg(niveau) as niveau_moyen from dresseurs join detient_pokemons on id = dresseur_id group by nom\",\n    \"select nom, count(*) from dresseurs join detient_pokemons on id = dresseur_id where niveau >= 50 group by nom having count(*) > 3\"\n  ],\n};\n","import React from \"react\";\nimport { Exo_interface } from \"./exos\";\n\nexport const exo_fonciere: Exo_interface = {\n  name: \"Valeur foncière\",\n  diagram: \"630bbf70f1a9b01b0ffa30be\",\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/notebooks/master/nb/db/fonciere/fonciere.sql\",\n  description: (\n    <div>\n      Informations sur une partie des ventes immobilières 2021 en France.{\" \"}\n      <br></br>\n      La <b>valeur foncière</b> est l'estimation de la valeur d'un terrain.{\" \"}\n      <br></br>\n      Les noms de voie et de commune sont en majuscules.\n      <br></br>\n      <a href=\"https://cadastre.data.gouv.fr/dvf\">Source : data.gouv</a>.\n    </div>\n  ),\n  questions: [\"Quel est le nombre moyen de m2 du bâti ?\"],\n  answers: [\n    \"select avg(surface_reelle_bati) as 'nombre moyen de m2 du bâti' from fonciere;\",\n  ],\n};\n","import React from \"react\";\nimport { Exo_interface } from \"./exos\";\n\nexport const exo_pays: Exo_interface = {\n  name: \"Pays\",\n  description: (\n    <div>Base de données contenant les pays du monde.</div>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/cpge-exercices/sql/main/db/pays.sql\",\n  diagram: \"642c778b5758ac5f1726bc6c\",\n  questions: [\n    \"Afficher tous les noms de pays.\",\n  ],\n  answers: [\n    \"SELECT nom FROM pays\"\n  ],\n};\n","import { Exo_interface } from \"./exos\";\nimport Grid from \"@mui/material/Grid\";\n\nexport const exo_metro: Exo_interface = {\n  name: \"Métro parisien\",\n  description: (\n    <Grid>\n      Cette base de données contient une table <code>metro</code> contenant les\n      stations de métro et RER parisiennes. Attributs de la table :\n      <ul>\n        <li>\n          <code>station</code> : nom de la station\n        </li>\n        <li>\n          <code>reseau</code> : <code>'Métro'</code> ou <code>'Rer'</code>\n        </li>\n        <li>\n          <code>trafic</code> : nombre de passagers en 2021\n        </li>\n        <li>\n          <code>ville</code> : ville de la station (exemples :{\" \"}\n          <code>'Paris'</code>, <code>'Saint-Denis'</code>)\n        </li>\n        <li>\n          <code>arrondissement</code> : arrondissement de la station (uniquement\n          pour Paris)\n        </li>\n        <li>\n          <code>correspondance_1</code> à <code>correspondance_5</code> : lignes\n          de métro/RER passant par la station\n        </li>\n      </ul>\n    </Grid>\n  ),\n  db_url:\n    \"https://raw.githubusercontent.com/fortierq/notebooks/master/nb/db/metro/metro.sql\",\n  diagram: \"630e18a30911f91ba5f92ffa\",\n  questions: [\n    \"Afficher toutes les stations de métro.\",\n    \"Afficher la (ou les) station(s) de Massy.\",\n    \"Afficher la station et le trafic de la station la plus fréquentée.\",\n    \"Afficher chaque arrondissement avec son nombre de stations de métro.\",\n  ],\n  answers: [\n    \"SELECT DISTINCT station FROM metro;\",\n    \"SELECT station FROM metro WHERE ville = 'Massy'\",\n    \"SELECT station, trafic FROM metro ORDER BY trafic DESC LIMIT 1\",\n    \"SELECT arrondissement, COUNT(*) FROM metro GROUP BY arrondissement\",\n  ],\n};\n","import { exo_pokemon } from \"./pokemon\";\nimport { exo_fonciere } from \"./fonciere\";\nimport { exo_pays } from \"./pays\"\nimport { exo_metro } from \"./metro\";\n\nexport interface Exo_interface {\n  name: string;\n  diagram: string;\n  db_url: string;\n  description: JSX.Element;\n  questions: string[];\n  answers: string[];\n}\n\nexport const exos: { [key: string]: Exo_interface } = {};\n[exo_metro, exo_pokemon, exo_fonciere, exo_pays].forEach((exo) => {\n  exos[exo.name] = exo;\n});","// https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres/\n\nimport React from \"react\";\nimport \"./styles.css\";\nimport Exo from \"./components/exo\";\nimport { exos } from \"./exos/exos\";\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Divider from \"@mui/material/Divider\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport GithubCorner from \"react-github-corner\";\nimport { Grid } from \"@mui/material\";\n\nconst drawerWidth = 240;\n\nconst cours = {\n    \"Requêtes sur une table\": { url: \"https://raw.githubusercontent.com/fortierq/cours/main/sql/cours/1_select/select.pdf\", exos: [\"Pays\"] },\n    \"Plusieurs tables\": { url: \"https://raw.githubusercontent.com/fortierq/cours/main/sql/cours/2_join/join.pdf\", exos: [] },\n    \"Fonctions d'agrégation\": { url: \"https://raw.githubusercontent.com/fortierq/cours/main/sql/cours/3_groupby/groupby.pdf\", exos: [] },\n}\nconst exercices_other = [\"Pokémon\", \"Métro parisien\", \"Valeur foncière\"];\n\nexport default function App(props) {\n    const { window } = props;\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n    const [selectedExo, setSelectedExo] = React.useState(\"Pays\");\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const container =\n        window !== undefined ? () => window().document.body : undefined;\n\n    const title = (t: string) => {\n        return <ListItem key={t} >\n            <ListItemText primary={\n                <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ fontWeight: 'bold' }}>\n                    <Typography style={{ fontWeight: \"bold\" }}>{t}</Typography>\n                </Grid>\n            } />\n        </ListItem>\n    }\n\n    const exercise = (e: any) => {\n        return <ListItem key={e} disablePadding>\n            <ListItemButton disableRipple selected={selectedExo === e} onClick={(_) => setSelectedExo(e)}>\n                Exercice : {e}\n            </ListItemButton>\n        </ListItem>\n    }\n\n    const drawer = (\n        <div>\n            <List>\n                {Object.entries(cours).map(([name, { url, exos }]) => (\n                    <div>\n                        {title(name)}\n                        <ListItem key={name} disablePadding>\n                            <ListItemButton disableRipple selected={selectedExo === name} onClick={(_) => setSelectedExo(name)}>\n                                Cours\n                            </ListItemButton>\n                        </ListItem>\n                        {exos.map(exercise)}\n                        <Divider sx={{ border: 1 }} />\n                    </div>\n                ))}\n                {title(\"Exercices généraux\")}\n                {exercices_other.map(exercise)}\n            </List>\n        </div>\n    );\n    \n    const exercises = {};\n    Object.values(exos).forEach((e) => exercises[e.name] = <Exo key={e.name} {...e} />);\n\n    return (\n        <div>\n            <Box sx={{ display: \"flex\" }}>\n                <CssBaseline />\n                <AppBar\n                    position=\"fixed\"\n                    sx={{\n                        width: { sm: `calc(100% - ${drawerWidth}px)` },\n                        ml: { sm: `${drawerWidth}px` },\n                        height: 60,\n                    }}\n                >\n                    <Toolbar>\n                        <GithubCorner\n                            href=\"https://github.com/cpge-exercices/sql\"\n                            direction=\"right\"\n                            size=\"60\"\n                        />\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={handleDrawerToggle}\n                            sx={{ mr: 2, display: { sm: \"none\" } }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" noWrap component=\"div\">\n                            Cours et exercices SQL\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <Box\n                    component=\"nav\"\n                    sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n                >\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                        sx={{\n                            display: { xs: \"block\", sm: \"none\" },\n                            \"& .MuiDrawer-paper\": {\n                                boxSizing: \"border-box\",\n                                width: drawerWidth,\n                            },\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                    <Drawer\n                        variant=\"permanent\"\n                        sx={{\n                            display: { xs: \"none\", sm: \"block\" },\n                            \"& .MuiDrawer-paper\": {\n                                boxSizing: \"border-box\",\n                                width: drawerWidth,\n                                border: 1.5,\n                            },\n                        }}\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Box>\n                <Box\n                    component=\"main\"\n                    sx={{\n                        flexGrow: 1,\n                        p: 3,\n                        width: { sm: `calc(100% - ${drawerWidth}px)` },\n                    }}\n                >\n                    <Toolbar />\n                    {selectedExo in exercises && exercises[selectedExo]}\n                    {selectedExo in cours && <iframe src={`https://mozilla.github.io/pdf.js/web/viewer.html?file=${cours[selectedExo].url}#zoom=page-fit&pagemode=none`} width=\"100%\" height=\"800\" />}\n                </Box>\n            </Box>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}